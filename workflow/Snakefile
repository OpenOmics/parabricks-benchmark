# Python standard library
from os.path import join
import os, sys, json

# Local imports
from scripts.common import (
    allocated,
    provided, 
    references,
    str_bool
)


# Global workflow variables and settings
configfile: 'config.json'                     # Generated from user input and config/*.json
run_mode  = config['options']['mode']         # Run mode: local, slurm, or uge
samples   = config['samples']                 # Base name of input samples
bindpaths = config['bindpaths']               # Paths to bind to the container 
workpath  = config['options']['output']       # Pipeline's output directory
tmpdir    = config['options']['tmp_dir']      # Temporary directory
# Basename of reference genome fasta file
genome = os.path.basename(
    config['references']['GENOME_FASTA']
)
# BWA index file extensions
bwa_index_extensions = [
    ".amb", ".ann", ".bwt", ".pac", ".sa"
]

# Benchmark configurations for 
# different GPU, memory, and 
# performance settings
benchmark_configurations = [
    "1gpu_normal_memory",
    "1gpu_normal_memory_optimized",
    "1gpu_low_memory",
    "1gpu_high_memory",
    "2gpu_normal_memory",
    "2gpu_normal_memory_optimized",
    "2gpu_low_memory",
    "4gpu_normal_memory",
    "4gpu_normal_memory_optimized"
]

# Read in resource information,
# containing information about 
# threads, mem, walltimes, etc.
with open(join('config', 'cluster.json')) as fh:
    cluster = json.load(fh)


# Final output files of the pipeline
rule all:
    input:
        # Symlinked reference genome and build BWA index files,
        # Output files of `rule build_bwa_index` in file 
        # `rules/build.smk`
        join(workpath, "refs", genome),
        expand(
            join(workpath, "refs", genome + "{ext}"), 
            ext=bwa_index_extensions
        ),
        # GATK germline pipeline output files,
        # Run Parabricks germline pipeline with 1 GPU and normal memory,
        # Output files of `rule parabricks_gatk_germline_1gpu_normal_memory`
        # in file `rules/germline.smk`
        expand(
            join(workpath, "gatk_germline", "1gpu_normal_memory", "{name}", "{name}.bam"),
            name=samples
        ),
        # Run Parabricks germline pipeline with 1 GPU and normal memory and
        # a recommended set of option to gain the best performance/runtimes,
        # Output files of `rule parabricks_gatk_germline_1gpu_normal_memory_optimized`
        # in file `rules/germline.smk`
        expand(
            join(workpath, "gatk_germline", "1gpu_normal_memory_optimized", "{name}", "{name}.bam"),
            name=samples
        ),
        # Run Parabricks germline pipeline with 1 GPU and low memory options,
        # Output files of `rule parabricks_gatk_germline_1gpu_low_memory`
        # in file `rules/germline.smk`
        expand(
            join(workpath, "gatk_germline", "1gpu_low_memory", "{name}", "{name}.bam"),
            name=samples
        ),
        # Run Parabricks germline pipeline with 1 GPU and high memory,
        # Output files of `rule parabricks_gatk_germline_1gpu_high_memory`
        # in file `rules/germline.smk`
        expand(
            join(workpath, "gatk_germline", "1gpu_high_memory", "{name}", "{name}.bam"),
            name=samples
        ),
        # Run Parabricks germline pipeline with 2 GPU and normal memory,
        # Output files of `rule parabricks_gatk_germline_2gpu_normal_memory`
        # in file `rules/germline.smk`
        expand(
            join(workpath, "gatk_germline", "2gpu_normal_memory", "{name}", "{name}.bam"),
            name=samples
        ),
        # Run Parabricks germline pipeline with 2 GPU and normal memory and
        # a recommended set of option to gain the best performance/runtimes,
        # Output files of `rule parabricks_gatk_germline_2gpu_normal_memory_optimized`
        # in file `rules/germline.smk`
        expand(
            join(workpath, "gatk_germline", "2gpu_normal_memory_optimized", "{name}", "{name}.bam"),
            name=samples
        ),
        # Run Parabricks germline pipeline with 2 GPU and low memory options,
        # Output files of `rule parabricks_gatk_germline_2gpu_low_memory`
        # in file `rules/germline.smk`
        expand(
            join(workpath, "gatk_germline", "2gpu_low_memory", "{name}", "{name}.bam"),
            name=samples
        ),
        # Run Parabricks germline pipeline with 4 GPU and normal memory,
        # Output files of `rule parabricks_gatk_germline_4gpu_normal_memory`
        # in file `rules/germline.smk`
        expand(
            join(workpath, "gatk_germline", "4gpu_normal_memory", "{name}", "{name}.bam"),
            name=samples
        ),
        # Run Parabricks germline pipeline with 4 GPU and normal memory and
        # a recommended set of option to gain the best performance/runtimes,
        # Output files of `rule parabricks_gatk_germline_4gpu_normal_memory_optimized`
        # in file `rules/germline.smk`
        expand(
            join(workpath, "gatk_germline", "4gpu_normal_memory_optimized", "{name}", "{name}.bam"),
            name=samples
        ),
        # DeepVariant germline pipeline output files,
        # Run Parabricks DeepVariant germline pipeline with 1 GPU and normal memory 
        # and a recommended set of option to gain the best performance/runtimes,
        # Output files of `rule parabricks_deepvariant_germline_1gpu_normal_memory_optimized`
        # in file `rules/germline.smk`
        expand(
            join(workpath, "deepvariant_germline", "1gpu_normal_memory_optimized", "{name}", "{name}.bam"),
            name=samples
        ),
        # bgzip compress and index VCF files,
        # Output files of `rule bgzip_index_vcf`
        expand(
            join(workpath, "gatk_germline", "{benchmark_configuration}", "{name}", "{name}.vcf.gz"),
            benchmark_configuration=benchmark_configurations,
            name=samples
        ),
        expand(
            join(workpath, "deepvariant_germline", "1gpu_normal_memory_optimized", "{name}", "{name}.vcf.gz"),
            name=samples
        ),


# Import rules 
include: join("rules", "common.smk")
include: join("rules", "hooks.smk")
include: join("rules", "build.smk")
include: join("rules", "germline.smk")